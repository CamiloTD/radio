import StripAnsi from 'strip-ansi';

let { stdout } = process;
let iid: number = 0;

//NextID - Next unique ID
export function NextID() {
	return ++iid
}

//CreateBox - Creates a box with specified title and content
export function CreateBox(title: string, ...content: string[]) {
	const tableLines = content.join("\n").split("\n")
	let tableWidth = 0

	for (const line of tableLines) {
		const lineLength = Length(line)

		if (lineLength > tableWidth) {
			tableWidth = lineLength
		}
	}


    const tableTop = TitledBoxTop(title, tableWidth + 4);
	if(Length(tableTop) > tableWidth + 4) tableWidth = Length(tableTop) - 4;
	
    let i=0;
	for (const line of tableLines) {
		tableLines[i++] = FixedBoxLine(line, tableWidth)
	}

	const tableBottom = BoxBottom(tableWidth + 4)

	return `${tableTop}\n${tableLines.join("\n")}\n${tableBottom}`;
}


//RenderBoxGroup - Prints a list of texts horizontally
export function RenderBoxGroup(...s: string[]) {
	const linePacks: string[][] = []
	let maxLines: number = 0
    
    let i: number = 0;
	for (const text of s) {
		linePacks[i] = text.split("\n")

		if (linePacks[i].length > maxLines) {
			maxLines = linePacks[i].length
        }
        i++;
	}

    let str: string = ""
    
	for(i = 0; i < maxLines; i++){
		for (const lines of linePacks) {
			if (lines.length > i) {
				str += lines[i]
			} else {
                str += RepeatText(" ", Length(lines[0]))
            }
		}
		str += "\n"
	}

	return str
}

//TitledBoxTop -> ╔═══title═══╗
export function TitledBoxTop(title: string, width: number) {
	let str: string = "╔"

	str += CenteredText(" "+title+" ", "═", width-2)

	str += "╗"

	return str
}

//BoxLine -> ║    text    ║
export function BoxLine(text: string) {
	return FixedBoxLine(text, Length(text))
}

//FixedBoxLine -> ║    text    ║
export function FixedBoxLine(text: string, width: number) {
	let str: string = "║"

	str += LeftText(text, " ", width+2)

	str += "║"

	return str
}

//BoxTop -> ╔════════════╗
export function BoxTop(width: number) {
	let str: string = "╔"

	str += RepeatText("═", width-2)

	str += "╗"

	return str
}

//BoxBottom -> ╚════════════╝
export function BoxBottom(width: number) {
	let str: string = "╚"

	str += RepeatText("═", width-2)

	str += "╝"

	return str
}

//? String Utilities

//RepeatText - Construct string s till reaches width length
export function RepeatText(s: string, width: number) {
	let str: string = ""

	while (Length(str) < width) {
		str += s
	}

	return str
}

//CenteredText -> ════ title ═════
export function CenteredText(title: string, separator: string, totalWidth: number) {
	const titleLength = Length(title)
	const borderSize = totalWidth - titleLength

	if (borderSize < 0) {
		return title
    }
    
	const borderLeft = RepeatText(separator, Math.ceil(borderSize/2))
	const borderRight = RepeatText(separator, Math.floor(borderSize/2))

	return borderLeft + title + borderRight
}

//LeftText -> ════ title ═════
export function LeftText(title: string, separator: string, totalWidth: number) {
	const titleLength = Length(title)
	const borderSize = totalWidth - titleLength

	if (borderSize < 0) {
		return title
	}
	
	return " " + title + RepeatText(separator, borderSize - 2) + " "
}

//Length - Get utf8 string length
export function Length(str: string) {
	return StripAnsi(str).length
}

//Cls - Clears stdout
export function Cls() {
	console.clear()
}
