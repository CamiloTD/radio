"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var strip_ansi_1 = __importDefault(require("strip-ansi"));
var stdout = process.stdout;
var iid = 0;
//NextID - Next unique ID
function NextID() {
    return ++iid;
}
exports.NextID = NextID;
//CreateBox - Creates a box with specified title and content
function CreateBox(title) {
    var content = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        content[_i - 1] = arguments[_i];
    }
    var tableLines = content.join("\n").split("\n");
    var tableWidth = 0;
    for (var _a = 0, tableLines_1 = tableLines; _a < tableLines_1.length; _a++) {
        var line = tableLines_1[_a];
        var lineLength = Length(line);
        if (lineLength > tableWidth) {
            tableWidth = lineLength;
        }
    }
    var tableTop = TitledBoxTop(title, tableWidth + 4);
    if (Length(tableTop) > tableWidth + 4)
        tableWidth = Length(tableTop) - 4;
    var i = 0;
    for (var _b = 0, tableLines_2 = tableLines; _b < tableLines_2.length; _b++) {
        var line = tableLines_2[_b];
        tableLines[i++] = FixedBoxLine(line, tableWidth);
    }
    var tableBottom = BoxBottom(tableWidth + 4);
    return tableTop + "\n" + tableLines.join("\n") + "\n" + tableBottom;
}
exports.CreateBox = CreateBox;
//RenderBoxGroup - Prints a list of texts horizontally
function RenderBoxGroup() {
    var s = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        s[_i] = arguments[_i];
    }
    var linePacks = [];
    var maxLines = 0;
    var i = 0;
    for (var _a = 0, s_1 = s; _a < s_1.length; _a++) {
        var text = s_1[_a];
        linePacks[i] = text.split("\n");
        if (linePacks[i].length > maxLines) {
            maxLines = linePacks[i].length;
        }
        i++;
    }
    var str = "";
    for (i = 0; i < maxLines; i++) {
        for (var _b = 0, linePacks_1 = linePacks; _b < linePacks_1.length; _b++) {
            var lines = linePacks_1[_b];
            if (lines.length > i) {
                str += lines[i];
            }
            else {
                str += RepeatText(" ", Length(lines[0]));
            }
        }
        str += "\n";
    }
    return str;
}
exports.RenderBoxGroup = RenderBoxGroup;
//TitledBoxTop -> ╔═══title═══╗
function TitledBoxTop(title, width) {
    var str = "╔";
    str += CenteredText(" " + title + " ", "═", width - 2);
    str += "╗";
    return str;
}
exports.TitledBoxTop = TitledBoxTop;
//BoxLine -> ║    text    ║
function BoxLine(text) {
    return FixedBoxLine(text, Length(text));
}
exports.BoxLine = BoxLine;
//FixedBoxLine -> ║    text    ║
function FixedBoxLine(text, width) {
    var str = "║";
    str += LeftText(text, " ", width + 2);
    str += "║";
    return str;
}
exports.FixedBoxLine = FixedBoxLine;
//BoxTop -> ╔════════════╗
function BoxTop(width) {
    var str = "╔";
    str += RepeatText("═", width - 2);
    str += "╗";
    return str;
}
exports.BoxTop = BoxTop;
//BoxBottom -> ╚════════════╝
function BoxBottom(width) {
    var str = "╚";
    str += RepeatText("═", width - 2);
    str += "╝";
    return str;
}
exports.BoxBottom = BoxBottom;
//? String Utilities
//RepeatText - Construct string s till reaches width length
function RepeatText(s, width) {
    var str = "";
    while (Length(str) < width) {
        str += s;
    }
    return str;
}
exports.RepeatText = RepeatText;
//CenteredText -> ════ title ═════
function CenteredText(title, separator, totalWidth) {
    var titleLength = Length(title);
    var borderSize = totalWidth - titleLength;
    if (borderSize < 0) {
        return title;
    }
    var borderLeft = RepeatText(separator, Math.ceil(borderSize / 2));
    var borderRight = RepeatText(separator, Math.floor(borderSize / 2));
    return borderLeft + title + borderRight;
}
exports.CenteredText = CenteredText;
//LeftText -> ════ title ═════
function LeftText(title, separator, totalWidth) {
    var titleLength = Length(title);
    var borderSize = totalWidth - titleLength;
    if (borderSize < 0) {
        return title;
    }
    return " " + title + RepeatText(separator, borderSize - 2) + " ";
}
exports.LeftText = LeftText;
//Length - Get utf8 string length
function Length(str) {
    return strip_ansi_1.default(str).length;
}
exports.Length = Length;
//Cls - Clears stdout
function Cls() {
    console.clear();
}
exports.Cls = Cls;
//# sourceMappingURL=boxes.js.map